{
    "docs": [
        {
            "location": "/",
            "text": "Webswing documentation\n\uf0c1\n\n\nBring your swing applications to web browser. Instantly. \n\n\nWebswing project page \nWebswing.org\n\n\nDocumentation sources are located in \n/documentation folder\n\n\n\n\nNote: Please help us improve this documentation by sending us feedback or pull requests.  Any improvements or suggestions are appreciated.   \n\n\n\n\n\n\nOverview\n\uf0c1\n\n\nWebswing is a specialized web server for running any Swing based Java application in your browser. Webswing \noffers unique instant solution for: \n\n\n\n\nSwing Applications\n\n\nJava Applets\n\n\nNetbeans Platform Applications\n\n\n\n\nall this with:\n\n\n\n\nNo browser plugin - only HTML5\n\n\nNo code modification or conversion\n\n\nWorks with any custom components and frameworks\n\n\n\n\n\n\nFeatures\n\uf0c1\n\n\nWebswing provides many convenient integrated features which makes working with webswing application as easy as if they were running localy. \n\n\n\n\nPrinting integration\n with preview\n\n\nFilesystem integration\n - download / upload / delete  files in isolated folder\n\n\nAdvanced \nClipboard integration\n\n\nJsLink\n - javascript to Java calls and vice versa\n\n\nEmbedable javascript\n - embed Webswing in your web page\n\n\nSession recording and playback\n capability built-in\n\n\nMirror view - see what users see from admin console\n\n\nConfigure your application from admin console\n\n\nConfigurable Swing window decoration themes\n\n\nJava 6, 7 and 8 support\n\n\nDirectDraw\n - renering directly from Java2d to HTML Canvas\n\n\n\n\nRunning your application in Webswing brings many advantages compared to standard desktop use like:\n\n\n\n\nSwing application codebase protection\n\n\nEasy distribution of new application version\n\n\nControl of Java version used for running Swing applications\n\n\nNo security threats from outdated Java runtime on client machines\n\n\nFaster connection to backend services\n\n\nCentralized access management\n\n\n\n\n\n\nQuick Start Guide\n\uf0c1\n\n\nThis step by step guide will help you install and start Webswing server and setup your swing application in 5 minutes.\n\n\nPrerequisities\n\n\n\n\nJRE 6,7 or 8 installed\n\n\nModern browser installed  \n\n\n\n\nFor the purpose of this guide we will use Windows based box. Linux installation is covered in separate page. \n\n\nDownload the distribution from \nWebswing home page\n and unzip it to new folder. For demonstration we will \nC:\\webswing\n\n\n\n\nOpen the start.bat in text editor and make sure you are using the corrent java executable. (Verify by running java -version in your command line.)\n\n\nDouble click on \nstart.bat\n file to start Webswing server.\n\n\n\n\nOpen your borwser to address \nhttp://localhost:8080\n\n\n\n\nLogin using the default username and password \nadmin\n and \npwd\n.\n\n\n\n\nNow you can see the list of demo applications and Admin console icon in the selection. Click on the \nAdmin console\n.\n\n\n\n\nIn Admin console navigate to \nSettings\n -\n \nServer configuration\n. Here we can add new swing application to \nwebswing.config\n json configuration file.\n\n\n\n\nClick on the \nNew\n button on the \nSwing applications\n tab. And fill in the basic details as required. Hover over the question mark for setting explanation.\n\n\n\n\nSet the application main class and classpath. \n\n\n\n\nSetup security \n\n\n\n\nNow click on the \nApply\n button to save and apply the new configuration.\n\n\nLoad the first page again,  \nhttp://localhost:8080\n, where you should see the newly configured application. \n\n\n\n\nClick on the application to start the swing inside the browser. \n\n\n\n\nIn case the application failed to start, search for the problem in the log file \nwebswing.log\n located in the webswing folder - in our case \nC:\\webswing\n.",
            "title": "Introduction"
        },
        {
            "location": "/#webswing-documentation",
            "text": "Bring your swing applications to web browser. Instantly.   Webswing project page  Webswing.org  Documentation sources are located in  /documentation folder   Note: Please help us improve this documentation by sending us feedback or pull requests.  Any improvements or suggestions are appreciated.",
            "title": "Webswing documentation"
        },
        {
            "location": "/#overview",
            "text": "Webswing is a specialized web server for running any Swing based Java application in your browser. Webswing \noffers unique instant solution for:    Swing Applications  Java Applets  Netbeans Platform Applications   all this with:   No browser plugin - only HTML5  No code modification or conversion  Works with any custom components and frameworks",
            "title": "Overview"
        },
        {
            "location": "/#features",
            "text": "Webswing provides many convenient integrated features which makes working with webswing application as easy as if they were running localy.    Printing integration  with preview  Filesystem integration  - download / upload / delete  files in isolated folder  Advanced  Clipboard integration  JsLink  - javascript to Java calls and vice versa  Embedable javascript  - embed Webswing in your web page  Session recording and playback  capability built-in  Mirror view - see what users see from admin console  Configure your application from admin console  Configurable Swing window decoration themes  Java 6, 7 and 8 support  DirectDraw  - renering directly from Java2d to HTML Canvas   Running your application in Webswing brings many advantages compared to standard desktop use like:   Swing application codebase protection  Easy distribution of new application version  Control of Java version used for running Swing applications  No security threats from outdated Java runtime on client machines  Faster connection to backend services  Centralized access management",
            "title": "Features"
        },
        {
            "location": "/#quick-start-guide",
            "text": "This step by step guide will help you install and start Webswing server and setup your swing application in 5 minutes.  Prerequisities   JRE 6,7 or 8 installed  Modern browser installed     For the purpose of this guide we will use Windows based box. Linux installation is covered in separate page.   Download the distribution from  Webswing home page  and unzip it to new folder. For demonstration we will  C:\\webswing   Open the start.bat in text editor and make sure you are using the corrent java executable. (Verify by running java -version in your command line.)  Double click on  start.bat  file to start Webswing server.   Open your borwser to address  http://localhost:8080   Login using the default username and password  admin  and  pwd .   Now you can see the list of demo applications and Admin console icon in the selection. Click on the  Admin console .   In Admin console navigate to  Settings  -   Server configuration . Here we can add new swing application to  webswing.config  json configuration file.   Click on the  New  button on the  Swing applications  tab. And fill in the basic details as required. Hover over the question mark for setting explanation.   Set the application main class and classpath.    Setup security    Now click on the  Apply  button to save and apply the new configuration.  Load the first page again,   http://localhost:8080 , where you should see the newly configured application.    Click on the application to start the swing inside the browser.    In case the application failed to start, search for the problem in the log file  webswing.log  located in the webswing folder - in our case  C:\\webswing .",
            "title": "Quick Start Guide"
        },
        {
            "location": "/server/install/",
            "text": "Instalation Guide\n\uf0c1\n\n\nWebswing is packaged and distributed as a fully working demo package for your convenience, so no complicated installation is needed. Just unpack the distribution zip file and you are good to go. The only prerequisite is to have a supported version of Java installed. \n\n\nSupported Java versions are\n\n\n\n\nOracle Java 1.6.0_45+\n\n\nOracle Java 1.7.0_60+\n\n\nOracle Java 1.8.0_25+\n\n\n\n\n\n\nStarting on Windows\n\uf0c1\n\n\nIf you are using Windows operating system, you can use the \nstart.bat\n script, which executes the following command: \n\n\njava -jar webswing-server.war -j jetty.properties\n\n\n\n\n\n\nNote: Make sure \njava\n is pointing to a supported java version by running \njava -version\n from your commandline.  \n\n\n\n\n\n\nStarting on Linux\n\uf0c1\n\n\nStarting Webswing on Linux desktop (within XServer) session is as simple as running the above command - same as on Windows.\n\n\nIn most cases however, the linux server is a headless box. In these cases we would get error running the above command, because swing framework depends on graphical environment. To overcome this we can use X virtual frame buffer (\nXvfb\n) to satisfy these dependencies. \n\n\nPlease install the following linux packages to satisfy all Swing framework dependencies (names are from ubuntu repositories - use relevant counterparts for your distribution):\n\n\n\n\nxvfb\n\n\nlibxext6\n\n\nlibxi6\n\n\nlibxtst6\n\n\nlibxrender1\n\n\n\n\nWebswing distribution contains a convenience linux start script - \nstart.sh\n. Before running the script you need to adapt following variables in the script as necessary for your environment: \n\n\nexport HOME=/home/webswing\nexport OPTS=\n-h 0.0.0.0 -j $HOME/jetty.properties -u $HOME/user.properties -c $HOME/webswing.config\n\nexport JAVA_HOME=/opt/java8\nexport JAVA_OPTS=\n-Xmx128M\n \n\n\n\n\nWhen started, this script will create two additional files in \nHOME\n folder.\n\n\n\n\nwebswing.pid\n storing the pid of current webswing process\n\n\nwebswing.out\n standard output and error is redirected to this file.\n\n\n\n\nFor running the script you have following options:\n\n\nUsage: start.sh {run|start|stop|restart|status}\n\n\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstart.sh run\n\n\nThis command can be used to start Webswing if you are inside X session. This will block the terminal until server stops.\n\n\n\n\n\n\nstart.sh start\n\n\nStart Webswing as deamon in new Xvfb session using the \nxvfb-run\n command\n\n\n\n\n\n\nstart.sh stop\n\n\nStops running Webswing server\n\n\n\n\n\n\nstart.sh restart\n\n\nStops and starts Webswing server\n\n\n\n\n\n\nstart.sh status\n\n\nChecks if webswing server is running.\n\n\n\n\n\n\n\n\n\n\nImportant files\n\uf0c1\n\n\nWebswing distribution contains several files, but only three of them are necessary to run webswing.\n\n\n\n\n\n\n\n\nwebswing-server.war\n file is the main executable file. This file is a regular java web application archive with embeded jetty server.\n\n\n\n\n\n\nwebswing.config\n file contains the configuration of swing applications. Swing application's class-path, main class, arguments and permissions are described in this file. See more details in \"Application setup\" section.\n\n\n\n\n\n\nuser.properties\n contains the users, passwords and authorization roles. This file is necessary unless you configure your own application security realm in \nshiro.ini\n. \n(more details here)\n\n\n\n\n\n\n(optional)\njetty.properties\n is a convenient option of configuring the built-in jetty server. Each setting can be overridden with command-line option. For more details refer to \nServer start-up parameters\n section\n\n\n\n\n\n\nWebswing generates following output files:\n\n\ntmp\n folder is created for extracting client libraries and temporary files generated by application print or file download functionality. Path for this temporary folder can be changed by defining comman-line option \n-t \npath\n . By default \ntmp\n folder contents are wiped when Webswing starts. If \n-d true\n is set, a time-stamped folder inside \ntmp\n is created every time Webswing server is started.\n\n\nwebswing.log\n file for storing Webswing server and swing application instance logs.\n\n\nwebswing.config.backup\n the webswing.config file content is backed up to this file after this config is changed in administration console. By default last 10 version are kept in this file.",
            "title": "Instalation guide"
        },
        {
            "location": "/server/install/#instalation-guide",
            "text": "Webswing is packaged and distributed as a fully working demo package for your convenience, so no complicated installation is needed. Just unpack the distribution zip file and you are good to go. The only prerequisite is to have a supported version of Java installed.   Supported Java versions are   Oracle Java 1.6.0_45+  Oracle Java 1.7.0_60+  Oracle Java 1.8.0_25+",
            "title": "Instalation Guide"
        },
        {
            "location": "/server/install/#starting-on-windows",
            "text": "If you are using Windows operating system, you can use the  start.bat  script, which executes the following command:   java -jar webswing-server.war -j jetty.properties   Note: Make sure  java  is pointing to a supported java version by running  java -version  from your commandline.",
            "title": "Starting on Windows"
        },
        {
            "location": "/server/install/#starting-on-linux",
            "text": "Starting Webswing on Linux desktop (within XServer) session is as simple as running the above command - same as on Windows.  In most cases however, the linux server is a headless box. In these cases we would get error running the above command, because swing framework depends on graphical environment. To overcome this we can use X virtual frame buffer ( Xvfb ) to satisfy these dependencies.   Please install the following linux packages to satisfy all Swing framework dependencies (names are from ubuntu repositories - use relevant counterparts for your distribution):   xvfb  libxext6  libxi6  libxtst6  libxrender1   Webswing distribution contains a convenience linux start script -  start.sh . Before running the script you need to adapt following variables in the script as necessary for your environment:   export HOME=/home/webswing\nexport OPTS= -h 0.0.0.0 -j $HOME/jetty.properties -u $HOME/user.properties -c $HOME/webswing.config \nexport JAVA_HOME=/opt/java8\nexport JAVA_OPTS= -Xmx128M    When started, this script will create two additional files in  HOME  folder.   webswing.pid  storing the pid of current webswing process  webswing.out  standard output and error is redirected to this file.   For running the script you have following options:  Usage: start.sh {run|start|stop|restart|status}     Command  Description      start.sh run  This command can be used to start Webswing if you are inside X session. This will block the terminal until server stops.    start.sh start  Start Webswing as deamon in new Xvfb session using the  xvfb-run  command    start.sh stop  Stops running Webswing server    start.sh restart  Stops and starts Webswing server    start.sh status  Checks if webswing server is running.",
            "title": "Starting on Linux"
        },
        {
            "location": "/server/install/#important-files",
            "text": "Webswing distribution contains several files, but only three of them are necessary to run webswing.     webswing-server.war  file is the main executable file. This file is a regular java web application archive with embeded jetty server.    webswing.config  file contains the configuration of swing applications. Swing application's class-path, main class, arguments and permissions are described in this file. See more details in \"Application setup\" section.    user.properties  contains the users, passwords and authorization roles. This file is necessary unless you configure your own application security realm in  shiro.ini .  (more details here)    (optional) jetty.properties  is a convenient option of configuring the built-in jetty server. Each setting can be overridden with command-line option. For more details refer to  Server start-up parameters  section    Webswing generates following output files:  tmp  folder is created for extracting client libraries and temporary files generated by application print or file download functionality. Path for this temporary folder can be changed by defining comman-line option  -t  path  . By default  tmp  folder contents are wiped when Webswing starts. If  -d true  is set, a time-stamped folder inside  tmp  is created every time Webswing server is started.  webswing.log  file for storing Webswing server and swing application instance logs.  webswing.config.backup  the webswing.config file content is backed up to this file after this config is changed in administration console. By default last 10 version are kept in this file.",
            "title": "Important files"
        },
        {
            "location": "/server/setup/",
            "text": "Startup options\n\uf0c1\n\n\nStart scripts \nstart.bat\n and \nstart.sh\n are included in Webswing distribution. These scripts may need to be adapted to point to the right java installation and to configure other custom options. \n\n\nStarting webswing with option \n-h\n will print out help with list of all possible option. \n\n\nc:\\webswing\njava -jar webswing-server.war -h\n\n\n\n\nYou can define following options in start scripts:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\n-c \n\n\nConfiguration file name.\n\n\nwebswing-server.war path\n/webswing.config\n\n\n\n\n\n\n-d \n\n\nCreate new temp folder for every webswing instance\n\n\nfalse\n\n\n\n\n\n\n-h \n\n\nLocal interface address where the web server will listen.\n\n\nlocalhost\n\n\n\n\n\n\n-j \n\n\nJetty startup configuration file.\n\n\n./jetty.properties\n\n\n\n\n\n\n-kp \n\n\nKeystore password.\n\n\n\n\n\n\n\n\n-ks \n\n\nKeystore file location for ssl configuration\n\n\n\n\n\n\n\n\n-p \n\n\nHttp port where the web server will listen. If 0 http is disable\n\n\n8080\n\n\n\n\n\n\n-s \n\n\nHttps port where the web server will listen.If 0 http is disabled.\n\n\n0\n\n\n\n\n\n\n-t \n\n\nThe folder where temp folder will be created for the webswing server\n\n\n./tmp\n\n\n\n\n\n\n-tp \n\n\nTruststore password\n\n\n\n\n\n\n\n\n-ts \n\n\nTruststore file location for ssl configuration\n\n\n\n\n\n\n\n\n-u \n\n\nUsers properties file name.\n\n\nwebswing-server.war path\n/users.properties\n\n\n\n\n\n\n\n\n\n\nSSL configuration\n\uf0c1\n\n\nThere is a special configuration file for the built-in jetty called \njetty.properties\n. It is used to configure connection options of the server like ports, protocols, SSL certificates and CORS origins (for embedded Webswing ). Command-line options have higher priority than this file. Location of this file can be specified by option \n-j\n. You can configure following options in this file: \n\n\norg.webswing.server.host=localhost\n\norg.webswing.server.http=true\norg.webswing.server.http.port=8080\n\norg.webswing.server.https=true\norg.webswing.server.https.port=8443\norg.webswing.server.https.truststore=ssl/truststore.jks\norg.webswing.server.https.truststore.password=123123\norg.webswing.server.https.keystore=ssl/keystore.jks\norg.webswing.server.https.keystore.password=123123\n\n#comma separated urls\norg.webswing.server.allowedCorsOrigins=*",
            "title": "Startup options"
        },
        {
            "location": "/server/setup/#startup-options",
            "text": "Start scripts  start.bat  and  start.sh  are included in Webswing distribution. These scripts may need to be adapted to point to the right java installation and to configure other custom options.   Starting webswing with option  -h  will print out help with list of all possible option.   c:\\webswing java -jar webswing-server.war -h  You can define following options in start scripts:     Option  Description  Default value      -c   Configuration file name.  webswing-server.war path /webswing.config    -d   Create new temp folder for every webswing instance  false    -h   Local interface address where the web server will listen.  localhost    -j   Jetty startup configuration file.  ./jetty.properties    -kp   Keystore password.     -ks   Keystore file location for ssl configuration     -p   Http port where the web server will listen. If 0 http is disable  8080    -s   Https port where the web server will listen.If 0 http is disabled.  0    -t   The folder where temp folder will be created for the webswing server  ./tmp    -tp   Truststore password     -ts   Truststore file location for ssl configuration     -u   Users properties file name.  webswing-server.war path /users.properties",
            "title": "Startup options"
        },
        {
            "location": "/server/setup/#ssl-configuration",
            "text": "There is a special configuration file for the built-in jetty called  jetty.properties . It is used to configure connection options of the server like ports, protocols, SSL certificates and CORS origins (for embedded Webswing ). Command-line options have higher priority than this file. Location of this file can be specified by option  -j . You can configure following options in this file:   org.webswing.server.host=localhost\n\norg.webswing.server.http=true\norg.webswing.server.http.port=8080\n\norg.webswing.server.https=true\norg.webswing.server.https.port=8443\norg.webswing.server.https.truststore=ssl/truststore.jks\norg.webswing.server.https.truststore.password=123123\norg.webswing.server.https.keystore=ssl/keystore.jks\norg.webswing.server.https.keystore.password=123123\n\n#comma separated urls\norg.webswing.server.allowedCorsOrigins=*",
            "title": "SSL configuration"
        },
        {
            "location": "/server/auth/",
            "text": "Authentication setup\n\uf0c1\n\n\nWebswing uses Apache Shiro framework for authentication and authorization. By default, the users are configured in simple properties file called \nuser.properties\n, which is expected to be in the same folder as the \nwebswing-server.war\n file. Location of this file could be changed using the \n-u\n command-line option.\n\n\nThis is the sample content of \nuser.properties\n file:\n\n\n#user.=[,role1][,role2]...\nuser.admin=pwd,admin\nuser.user=pwd,Printing\nuser.guest=guest\n\n\n\n\nFirst line is a comment describing the format. Each user entry starts with prefix \nuser.\n, followed by the actual user name. Password is specified after the equals sign. After the password comes comma separated list of roles for specifying the list of authorized applications. Role \nadmin\n enables access to Administration console and implicit access to all applications. Role \nPrinting\n refers to swing application name from \nwebswing.config\n file.\n\n\n\n\nCustom Authentication provider with Shiro\n\uf0c1\n\n\nShiro framework offers also other methods of authentication like Ldap, Database or Active Directory. This could be configured in \nshiro.ini\n file which is located in the \nwebswing-server.war\n archive in \nWEB-INF\n folder. Security manager realm implementation class name \norg.webswing.server.util.WebSwingPropertiesRealm\n has to be changed to one of the standard Shiro's implementations or your own custom. \nSee:\n\n\n\n\norg.apache.shiro.realm.ldap.JndiLdapRealm \n\n\norg.apache.shiro.realm.activedirectory.ActiveDirectoryRealm \n\n\norg.apache.shiro.realm.jdbc.JdbcRealm\n\n\n\n\n[main]\nauthc=org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter\nauthc.loginUrl = /login\n\nwebswingUserProps=org.webswing.server.util.WebSwingPropertiesRealm\nsecurityManager.realm = $webswingUserProps\n\n[urls]\n/async/admin/** = authc, roles[admin]\n/async/swing = authc\n/file = authc\n/upload = authc\n/logout = logout\n/** = anon \n\n\n\n\nFor detailed information please refer to Shiro documentation or if you need help with configuration please contact us.",
            "title": "Login configuration"
        },
        {
            "location": "/server/auth/#authentication-setup",
            "text": "Webswing uses Apache Shiro framework for authentication and authorization. By default, the users are configured in simple properties file called  user.properties , which is expected to be in the same folder as the  webswing-server.war  file. Location of this file could be changed using the  -u  command-line option.  This is the sample content of  user.properties  file:  #user.=[,role1][,role2]...\nuser.admin=pwd,admin\nuser.user=pwd,Printing\nuser.guest=guest  First line is a comment describing the format. Each user entry starts with prefix  user. , followed by the actual user name. Password is specified after the equals sign. After the password comes comma separated list of roles for specifying the list of authorized applications. Role  admin  enables access to Administration console and implicit access to all applications. Role  Printing  refers to swing application name from  webswing.config  file.",
            "title": "Authentication setup"
        },
        {
            "location": "/server/auth/#custom-authentication-provider-with-shiro",
            "text": "Shiro framework offers also other methods of authentication like Ldap, Database or Active Directory. This could be configured in  shiro.ini  file which is located in the  webswing-server.war  archive in  WEB-INF  folder. Security manager realm implementation class name  org.webswing.server.util.WebSwingPropertiesRealm  has to be changed to one of the standard Shiro's implementations or your own custom. \nSee:   org.apache.shiro.realm.ldap.JndiLdapRealm   org.apache.shiro.realm.activedirectory.ActiveDirectoryRealm   org.apache.shiro.realm.jdbc.JdbcRealm   [main]\nauthc=org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter\nauthc.loginUrl = /login\n\nwebswingUserProps=org.webswing.server.util.WebSwingPropertiesRealm\nsecurityManager.realm = $webswingUserProps\n\n[urls]\n/async/admin/** = authc, roles[admin]\n/async/swing = authc\n/file = authc\n/upload = authc\n/logout = logout\n/** = anon   For detailed information please refer to Shiro documentation or if you need help with configuration please contact us.",
            "title": "Custom Authentication provider with Shiro"
        },
        {
            "location": "/server/tomcat/",
            "text": "Tomcat Deployment\n\uf0c1\n\n\nEven though webswing comes with embedded Jetty server, it is still possible to deploy it to external servlet container like Tomcat. Other J2EE servers should work as well, as far as they support Servlet 3.0 spec (but only Tomcat 8 is tested). To deploy webswing to Tomcat, follow the following steps:\n\n\n\n\nCreate a new folder named \nwebswing\n in Tomcat's home folder and unzip the webswing distribution to this folder.\n\n\nMove \nwebswing-server.war\n from distribution package to Tomcat's \nwebapps\n folder.\n\n\nIn \nconf/catalina.properties\n file add the following properties. ( Or use \n-D\n jvm options to specify these properties) \n\n\n\n\nwebswing.warLocation=tomcat8_home/webapps/webswing-server.war\nwebswing.usersFilePath=tomcat8_home/webswing/user.properties\nwebswing.configFile=tomcat8_home/webswing/webswing.config\nwebswing.tempDirBase=tomcat8_home/webswing/tmp\n#if want to embed webswing to page hosted on different domain (set * for all)\nwebswing.corsOrigins=http://other.domain1, http://other.domain2 \n\n\n\n\n\n\nPlease note that the locations in demo \nwebswing.config\n are pointing to relative paths, so in order to make the demo applications running in tomcat you will need to change the paths accordingly",
            "title": "Tomcat deployment"
        },
        {
            "location": "/server/tomcat/#tomcat-deployment",
            "text": "Even though webswing comes with embedded Jetty server, it is still possible to deploy it to external servlet container like Tomcat. Other J2EE servers should work as well, as far as they support Servlet 3.0 spec (but only Tomcat 8 is tested). To deploy webswing to Tomcat, follow the following steps:   Create a new folder named  webswing  in Tomcat's home folder and unzip the webswing distribution to this folder.  Move  webswing-server.war  from distribution package to Tomcat's  webapps  folder.  In  conf/catalina.properties  file add the following properties. ( Or use  -D  jvm options to specify these properties)    webswing.warLocation=tomcat8_home/webapps/webswing-server.war\nwebswing.usersFilePath=tomcat8_home/webswing/user.properties\nwebswing.configFile=tomcat8_home/webswing/webswing.config\nwebswing.tempDirBase=tomcat8_home/webswing/tmp\n#if want to embed webswing to page hosted on different domain (set * for all)\nwebswing.corsOrigins=http://other.domain1, http://other.domain2    Please note that the locations in demo  webswing.config  are pointing to relative paths, so in order to make the demo applications running in tomcat you will need to change the paths accordingly",
            "title": "Tomcat Deployment"
        },
        {
            "location": "/app/swing/",
            "text": "Swing Application setup\n\uf0c1\n\n\nSwing applications are configured in json format and by default saved in file \nwebswing.config\n, which is by default placed in the same folder as the \nwebswing-server.war\n file. This location may be changed using the \n-c\n command-line option. It is recommended to use Administration console's form based configuration screen to modify this file to avoid json formatting problems.\n\n\n\n\nUsing Admin console\n\uf0c1\n\n\nEasiest way of configuring your application is using Admin console. For accessing Admin console add \n/admin\n path to your webswing url (ie. \nhttp://localhost:8080/admin\n).\n\n\nThen go to \nSettings\n -\n \nServer configuration\n -\n \nSwing applications\n. You can see the list of configured applications. You can add new or edit existing applications here. \n\n\n \n\n\nBy selecting one of the application in the list it will expand the configuration panel where you can edit or view the settings. These are split in 3 panels:\n\n\n \n\n\nEach setting has a description, which is displayed when hovered on the question mark.\n\n\n \n\n\n\n\nJSON format description\n\uf0c1\n\n\nHere is a sample \nwebswing.config\n file content with demo swing application configured:\n\n\n{\n  \napplications\n : [{\n    \nname\n : \nSwingSet3\n,\n    \nicon\n : \n${user.dir}/demo/SwingSet3/icon.png\n,\n    \nmainClass\n : \ncom.sun.swingset3.SwingSet3\n,\n    \nclassPathEntries\n : [ \n${user.dir}/demo/SwingSet3/SwingSet3.jar\n, \n${user.dir}/demo/SwingSet3/lib/*.jar\n ],\n    \nvmArgs\n : \n-Xmx128m -DauthorizedUser=${user}\n,\n    \nargs\n : \n,\n    \nhomeDir\n : \ndemo/SwingSet3/${user}\n,\n    \nmaxClients\n : 1,\n    \nantiAliasText\n : true,\n    \nswingSessionTimeout\n : 300,\n    \nauthorization\n : false,\n    \nisolatedFs\n : true,\n    \ndebug\n : true,\n    \nauthentication\n : false,\n    \ndirectdraw\n : false,\n    \nallowDelete\n : true,\n    \nallowDownload\n : true,\n    \nallowUpload\n : true,\n    \nallowJsLink\n : true \n  }]\n}\n\n\n\n\n\n\nVariable resolution\n\uf0c1\n\n\nMost of the text options support variable replacement. Available variables are java system properties, os environment variables and set of special webswing vartiables. List of all available variables and their values are available in Admin console. Variables are specified with dolar folowed by variable name in curly brackets. For example \n${variable_name}\n.\n\n\nIn aditions to variables, for \nclassPathEntries\n properties it is possible to use wildcard characters. Supported wildcards are \n*\n (everything) and \n?\n (any singe character). \n\n\n\n\nAvailable variables:\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n${user}\n\n\nWebswing specific logged in user name.\n\n\n\n\n\n\n${clientId}\n\n\nWebswing specific unique browser identifier.\n\n\n\n\n\n\n${clientIp}\n\n\nIP address of browser which started this application.\n\n\n\n\n\n\n${clientLocale}\n\n\nLocale of browser which started this application.\n\n\n\n\n\n\n${customArgs}\n\n\nCustom Arguments specified in URL parameters. \nSee details\n\n\n\n\n\n\nJava system Properties\n\n\nAll properties accessible to server's JVM using System.getProperty method\n\n\n\n\n\n\nSystem environment variables\n\n\nAll OS level environment variables accessible to script that started webswing server JVM.\n\n\n\n\n\n\n\n\nIn Admin console options with variable replacement support appears with a flash icon. When focused a panel with resolved value of is displayed:\n\n\n\n\n\n\nSettings overview\n\uf0c1\n\n\nname\n: Swing application name. Will be displayed in application selection screen.\n\n\nicon\n: Path to icon displayed in application selection dialog. Absolute path or path relative to \nhomeDir\n\n\nmainClass\n: Swing application fully qualified class name. (ie. 'com.mypackage.Main')\n\n\nclassPathEntries\n: Swing application's classpath. Absolute or relative path to jar file or classes directory. At least one classPath entry should be specified containing the main class. Allows using \n?\n (any single char) and \n*\n (everything) wildcards.\n\n\nvmArgs\n: Commandline arguments processed by Oracle's Java Virtual Machine. (ie. '-Xmx128m')\n\n\nargs\n: Swing application main method arguments. This string will be passed to the main method's (String[] args)\n\n\nhomeDir\n: Swing application's home directory. Swing application instances will be executed from this directory. This will also be the base directory of any relative classpath entries specified.\n\n\nmaxClients\n: Maximum number of allowed simultaneous connections for this application.\n\n\nantiAliasText\n: Enables rendering of anti-aliased text. Smoothens the edges of the text.\n\n\nswingSessionTimeout\n: Specifies how long (seconds) will be the swing application left running after the user closes the browser. User can reconnect in this interval and continue in last session.\n\n\ntheme\n: Select one of the default window decoration themes or a enter path to a XFWM4 theme folder.\n\n\nauthentication\n: If set to \nfalse\n, the application will be accessible for anonymous user. If \ntrue\n only authenticated user is allowed to use this application. False setting will be ignored if \nauthorization\n option is \ntrue\n.\n\n\nauthorization\n: Set authorized access to this application. Only users with role same as application's name can access this application.\n\n\nisolatedFs\n: If enabled, this setting will force the JFileChooser to stay inside isolated folder. The new isolated folder is created in \n${homeDir}/upload\n \n\n\ndebug\n: Enables remote debugging for this application. After the application is started with \n?debugPort=8000\n url parameter from browser, it will wait for remote debugger connection on port 8000\n\n\ndirectdraw\n: Activates the new rendering method if the clients browser supports the required technologies (typed arrays, web socket). This feature is experimental state at the moment. For more information on this method refer to Development guide. \n\n\nallowDelete\n: This options activates the 'Delete' button on the JFileChooser integration panel. If this is true, user will be allowed to delete files displayed in JFileChooser dialog.\n\n\nallowDownload\n: This options activates the 'Download' button on the JFileChooser integration panel. If this is true, user will be allowed to download files displayed in JFileChooser dialog.\n\n\nallowUpload\n: This options activates the 'Upload' button and drop area on the JFileChooser integration panel. If this is true, user will be allowed to upload files to folder displayed in JFileChooser dialog.\n\n\nallowJsLink\n: If selected, the JSLink feature will be enabled, allowing swing application to invoke javascript and vice versa. (See \nnetscape.javascript.JSObject\n)",
            "title": "Swing application"
        },
        {
            "location": "/app/swing/#swing-application-setup",
            "text": "Swing applications are configured in json format and by default saved in file  webswing.config , which is by default placed in the same folder as the  webswing-server.war  file. This location may be changed using the  -c  command-line option. It is recommended to use Administration console's form based configuration screen to modify this file to avoid json formatting problems.",
            "title": "Swing Application setup"
        },
        {
            "location": "/app/swing/#using-admin-console",
            "text": "Easiest way of configuring your application is using Admin console. For accessing Admin console add  /admin  path to your webswing url (ie.  http://localhost:8080/admin ).  Then go to  Settings  -   Server configuration  -   Swing applications . You can see the list of configured applications. You can add new or edit existing applications here.      By selecting one of the application in the list it will expand the configuration panel where you can edit or view the settings. These are split in 3 panels:     Each setting has a description, which is displayed when hovered on the question mark.",
            "title": "Using Admin console"
        },
        {
            "location": "/app/swing/#json-format-description",
            "text": "Here is a sample  webswing.config  file content with demo swing application configured:  {\n   applications  : [{\n     name  :  SwingSet3 ,\n     icon  :  ${user.dir}/demo/SwingSet3/icon.png ,\n     mainClass  :  com.sun.swingset3.SwingSet3 ,\n     classPathEntries  : [  ${user.dir}/demo/SwingSet3/SwingSet3.jar ,  ${user.dir}/demo/SwingSet3/lib/*.jar  ],\n     vmArgs  :  -Xmx128m -DauthorizedUser=${user} ,\n     args  :  ,\n     homeDir  :  demo/SwingSet3/${user} ,\n     maxClients  : 1,\n     antiAliasText  : true,\n     swingSessionTimeout  : 300,\n     authorization  : false,\n     isolatedFs  : true,\n     debug  : true,\n     authentication  : false,\n     directdraw  : false,\n     allowDelete  : true,\n     allowDownload  : true,\n     allowUpload  : true,\n     allowJsLink  : true \n  }]\n}",
            "title": "JSON format description"
        },
        {
            "location": "/app/swing/#variable-resolution",
            "text": "Most of the text options support variable replacement. Available variables are java system properties, os environment variables and set of special webswing vartiables. List of all available variables and their values are available in Admin console. Variables are specified with dolar folowed by variable name in curly brackets. For example  ${variable_name} .  In aditions to variables, for  classPathEntries  properties it is possible to use wildcard characters. Supported wildcards are  *  (everything) and  ?  (any singe character).    Available variables:     Variable Name  Description      ${user}  Webswing specific logged in user name.    ${clientId}  Webswing specific unique browser identifier.    ${clientIp}  IP address of browser which started this application.    ${clientLocale}  Locale of browser which started this application.    ${customArgs}  Custom Arguments specified in URL parameters.  See details    Java system Properties  All properties accessible to server's JVM using System.getProperty method    System environment variables  All OS level environment variables accessible to script that started webswing server JVM.     In Admin console options with variable replacement support appears with a flash icon. When focused a panel with resolved value of is displayed:",
            "title": "Variable resolution"
        },
        {
            "location": "/app/swing/#settings-overview",
            "text": "name : Swing application name. Will be displayed in application selection screen.  icon : Path to icon displayed in application selection dialog. Absolute path or path relative to  homeDir  mainClass : Swing application fully qualified class name. (ie. 'com.mypackage.Main')  classPathEntries : Swing application's classpath. Absolute or relative path to jar file or classes directory. At least one classPath entry should be specified containing the main class. Allows using  ?  (any single char) and  *  (everything) wildcards.  vmArgs : Commandline arguments processed by Oracle's Java Virtual Machine. (ie. '-Xmx128m')  args : Swing application main method arguments. This string will be passed to the main method's (String[] args)  homeDir : Swing application's home directory. Swing application instances will be executed from this directory. This will also be the base directory of any relative classpath entries specified.  maxClients : Maximum number of allowed simultaneous connections for this application.  antiAliasText : Enables rendering of anti-aliased text. Smoothens the edges of the text.  swingSessionTimeout : Specifies how long (seconds) will be the swing application left running after the user closes the browser. User can reconnect in this interval and continue in last session.  theme : Select one of the default window decoration themes or a enter path to a XFWM4 theme folder.  authentication : If set to  false , the application will be accessible for anonymous user. If  true  only authenticated user is allowed to use this application. False setting will be ignored if  authorization  option is  true .  authorization : Set authorized access to this application. Only users with role same as application's name can access this application.  isolatedFs : If enabled, this setting will force the JFileChooser to stay inside isolated folder. The new isolated folder is created in  ${homeDir}/upload    debug : Enables remote debugging for this application. After the application is started with  ?debugPort=8000  url parameter from browser, it will wait for remote debugger connection on port 8000  directdraw : Activates the new rendering method if the clients browser supports the required technologies (typed arrays, web socket). This feature is experimental state at the moment. For more information on this method refer to Development guide.   allowDelete : This options activates the 'Delete' button on the JFileChooser integration panel. If this is true, user will be allowed to delete files displayed in JFileChooser dialog.  allowDownload : This options activates the 'Download' button on the JFileChooser integration panel. If this is true, user will be allowed to download files displayed in JFileChooser dialog.  allowUpload : This options activates the 'Upload' button and drop area on the JFileChooser integration panel. If this is true, user will be allowed to upload files to folder displayed in JFileChooser dialog.  allowJsLink : If selected, the JSLink feature will be enabled, allowing swing application to invoke javascript and vice versa. (See  netscape.javascript.JSObject )",
            "title": "Settings overview"
        },
        {
            "location": "/app/netbeans/",
            "text": "Netbeans Platform Application setup\n\uf0c1\n\n\nIn general Netbeans platform applications are configured the same way as \nregular swing applications\n. We can use Admin console or edit the \nwebswing.config\n file manualy. There are however few specific settings that are necessary for running Netbeans in Webswing.\n\n\nIn webswing distribution there are two examples for setting up Netbeans platform. \n\n\n\n\nSimple Netbeans setup\n\uf0c1\n\n\nFirst is a minimalistic Netbeans platform demonstration bootstraped with simple main class, not using the standard Netbeans packaging, which use shell script or exe file for bootstraping the application. Here is how its configured in Webswing: \n\n\n{\n    \nname\n : \nNetBeans Platform\n,\n    \nmainClass\n : \norg.webswing.demo.NbMain\n,\n    \nclassPathEntries\n : [ \nnbplatform.jar\n, \nlib/*.jar\n ],\n    \nvmArgs\n : \n-Dorg.netbeans.log.startup=print -DTopSecurityManager.disable=true\n,\n    //rest of the json omited\n}  \n\n\n\n\nMost important part here is the \n-DTopSecurityManager.disable=true\n property in \nvmArgs\n. This tells Netbeans to disable its default Java Security Manager which would otherwise prevent Webswing to do its magic. \n\n\nWe are using our own main class to bootstrap the Netbeans application. This is the only class located in \nnbplatform.jar\n. The \nlib\n folder contains the smallest subset of Netbeans libraries for starting the NB platform window. This is the content of main class:\n\n\npackage org.webswing.demo;\n\npublic class NbMain {\n    public static void main(String[] args) throws Exception {\n        org.netbeans.core.startup.Main.main(args);\n    }\n} \n\n\n\n\n\n\n\n\nFull Netbeans IDE setup\n\uf0c1\n\n\nSecond example included in distribution is the full blown Netbeans 8 IDE. The Netbeans installation itself is not included in the Webswing distribution for  for obvious reasons. So before running it, you will need to set up the \nhomeDir\n property in \nwebswing.config\n file to point to your Netbeans installation.\n\n\nHere is the snippet of relevant part of Webswing confiuration for Netbeans IDE:\n\n\n {\n    \nname\n : \nNetBeans IDE (set homeDir)\n,\n    \nmainClass\n : \norg.netbeans.Main\n,\n    \nclassPathEntries\n : [ \nplatform/lib/*.jar\n,\nplatform/lib/*/*.jar\n ],\n    \nvmArgs\n : \n-Dnetbeans.user=${user.dir}/tmp/netbeans/${user} -Dnetbeans.home=platform  -Dorg.netbeans.log.startup=print -DTopSecurityManager.disable=true -Dnetbeans.dirs=\\\nplatform;nb;ergonomics;ide;extide;java;apisupport;webcommon;websvccommon;enterprise;mobility;profiler;python;php;identity;harness;cnd;dlight;groovy;extra;javacard;javafx\\\n,\n    \nargs\n : \n,\n    \nhomeDir\n : \nc:/Program Files/NetBeans 8.0.2\n,\n    //rest of configuration ommited...\n}\n\n\n\n\n\n\nNote: this setup is for unmodified folder structure of Netbeans IDE. \n\n\n\n\nThis configuration mimics the shell script that initializes Netbeans IDE. Similar setup can be used for Netbeans platform applications that use the standard Netbeans packaging. \n\n\nHere are the most important parts of the setup explained.\n\n\nmainClass : \"org.netbeans.Main\"\n\n\nMain class for Netbeans will always be the above in case you are using standard way of packaging. \n\n\n\"classPathEntries\" : [ \"platform/lib/*.jar\",\"platform/lib/*/*.jar\" ]\n\n\nThese folders contains the Netbeans libraries that are necessary for bootstraping the NB application. Always use only these folders. Netbeans will load the rest of libraries by its plugin system.\n\n\n\"vmArgs\" : \"-Dnetbeans.home=platform\"\n\n\nThis setting tells Netbeans where to look for platform libraries and resources.\n\n\n\"vmArgs\" : \"-Dnetbeans.user=${user.dir}/tmp/netbeans/${user}\"\n\n\nNetbeans create its user session files in folder specified by this setting. It is good to have it different for each user, therefore we include the webswing specific variable \n${user}\n to the path. \n\n\n\"vmArgs\" : \"-DTopSecurityManager.disable=true\"\n\n\nAs noted above this will allow Webswing to do the magic.\n\n\n\"vmArgs\" : \"-Dnetbeans.dirs = \\\"platform;nb;ergonomics;ide;extide;java;apisupport...\n\n\nThis property will tell Netbeans which folders to look into for initializing the plugins. You can use the subset of necessary folders for your use case.\n\n\n\n\nNote: Be careful with the escaped chars like \n\\\"\n in the json configuration. It is recomended to use Admin console to avoid problems with escaping.",
            "title": "Netbeans Platform"
        },
        {
            "location": "/app/netbeans/#netbeans-platform-application-setup",
            "text": "In general Netbeans platform applications are configured the same way as  regular swing applications . We can use Admin console or edit the  webswing.config  file manualy. There are however few specific settings that are necessary for running Netbeans in Webswing.  In webswing distribution there are two examples for setting up Netbeans platform.",
            "title": "Netbeans Platform Application setup"
        },
        {
            "location": "/app/netbeans/#simple-netbeans-setup",
            "text": "First is a minimalistic Netbeans platform demonstration bootstraped with simple main class, not using the standard Netbeans packaging, which use shell script or exe file for bootstraping the application. Here is how its configured in Webswing:   {\n     name  :  NetBeans Platform ,\n     mainClass  :  org.webswing.demo.NbMain ,\n     classPathEntries  : [  nbplatform.jar ,  lib/*.jar  ],\n     vmArgs  :  -Dorg.netbeans.log.startup=print -DTopSecurityManager.disable=true ,\n    //rest of the json omited\n}    Most important part here is the  -DTopSecurityManager.disable=true  property in  vmArgs . This tells Netbeans to disable its default Java Security Manager which would otherwise prevent Webswing to do its magic.   We are using our own main class to bootstrap the Netbeans application. This is the only class located in  nbplatform.jar . The  lib  folder contains the smallest subset of Netbeans libraries for starting the NB platform window. This is the content of main class:  package org.webswing.demo;\n\npublic class NbMain {\n    public static void main(String[] args) throws Exception {\n        org.netbeans.core.startup.Main.main(args);\n    }\n}",
            "title": "Simple Netbeans setup"
        },
        {
            "location": "/app/netbeans/#full-netbeans-ide-setup",
            "text": "Second example included in distribution is the full blown Netbeans 8 IDE. The Netbeans installation itself is not included in the Webswing distribution for  for obvious reasons. So before running it, you will need to set up the  homeDir  property in  webswing.config  file to point to your Netbeans installation.  Here is the snippet of relevant part of Webswing confiuration for Netbeans IDE:   {\n     name  :  NetBeans IDE (set homeDir) ,\n     mainClass  :  org.netbeans.Main ,\n     classPathEntries  : [  platform/lib/*.jar , platform/lib/*/*.jar  ],\n     vmArgs  :  -Dnetbeans.user=${user.dir}/tmp/netbeans/${user} -Dnetbeans.home=platform  -Dorg.netbeans.log.startup=print -DTopSecurityManager.disable=true -Dnetbeans.dirs=\\ platform;nb;ergonomics;ide;extide;java;apisupport;webcommon;websvccommon;enterprise;mobility;profiler;python;php;identity;harness;cnd;dlight;groovy;extra;javacard;javafx\\ ,\n     args  :  ,\n     homeDir  :  c:/Program Files/NetBeans 8.0.2 ,\n    //rest of configuration ommited...\n}   Note: this setup is for unmodified folder structure of Netbeans IDE.    This configuration mimics the shell script that initializes Netbeans IDE. Similar setup can be used for Netbeans platform applications that use the standard Netbeans packaging.   Here are the most important parts of the setup explained.  mainClass : \"org.netbeans.Main\"  Main class for Netbeans will always be the above in case you are using standard way of packaging.   \"classPathEntries\" : [ \"platform/lib/*.jar\",\"platform/lib/*/*.jar\" ]  These folders contains the Netbeans libraries that are necessary for bootstraping the NB application. Always use only these folders. Netbeans will load the rest of libraries by its plugin system.  \"vmArgs\" : \"-Dnetbeans.home=platform\"  This setting tells Netbeans where to look for platform libraries and resources.  \"vmArgs\" : \"-Dnetbeans.user=${user.dir}/tmp/netbeans/${user}\"  Netbeans create its user session files in folder specified by this setting. It is good to have it different for each user, therefore we include the webswing specific variable  ${user}  to the path.   \"vmArgs\" : \"-DTopSecurityManager.disable=true\"  As noted above this will allow Webswing to do the magic.  \"vmArgs\" : \"-Dnetbeans.dirs = \\\"platform;nb;ergonomics;ide;extide;java;apisupport...  This property will tell Netbeans which folders to look into for initializing the plugins. You can use the subset of necessary folders for your use case.   Note: Be careful with the escaped chars like  \\\"  in the json configuration. It is recomended to use Admin console to avoid problems with escaping.",
            "title": "Full Netbeans IDE setup"
        },
        {
            "location": "/app/applet/",
            "text": "Java Applet configuration\n\uf0c1\n\n\nWebswing now offers a solution for running applets in web browser after the support of java plugins are slowly being discontinued in modern browsers. Java applets are not supported any more in current versions of Chrome browser: \nNPAPI support removed from Chrome\n.\n\n\nWebswing offers a easy way to continue using your applets on your page the same way you did before, but more securely and reliably. No more strugling with getting your applet to run for clients. Here is how it works.\n\n\nApplets support:\n \n\n\n\n\nEmbeding to your web page\n\n\nJava \n-\n Javascript interface\n\n\n\n\n\n\nSetup your applet in webswing server\n\uf0c1\n\n\nIn Admin console you can set up your java applet in \nSettings\n -\n \nServer configuration\n -\n \nApplets\n. Most of the settings in the panel are same as with standard \nSwing applications\n, the only diference is in \nJava settings\n tab, where you set up your \nappletClass\n and additional \nparameters\n for applets.\n\n\n\n\nThis is how a sample java applet configuration looks like in json:\n\n\napplets\n : [ {\n    \nname\n : \nSwingSet3 applet\n,\n    \nicon\n : \n${user.dir}/demo/SwingSet3/icon.png\n,\n    \nappletClass\n : \norg.webswing.demo.applet.SwingSet3Applet\n,\n    \nclassPathEntries\n : [ \n${user.dir}/demo/SwingSet3/SwingSet3.jar\n, \n${user.dir}/demo/SwingSet3/lib/*.jar\n ],\n    \nvmArgs\n : \n-Xmx128m -DauthorizedUser=${user}\n,\n    \nhomeDir\n : \ndemo/SwingSet3/${user}\n,\n    \nmaxClients\n : -1,\n    \nantiAliasText\n : true,\n    \nswingSessionTimeout\n : 100,\n    \nauthorization\n : false,\n    \nisolatedFs\n : true,\n    \ndebug\n : true,\n    \nauthentication\n : false,\n    \ndirectdraw\n : false,\n    \nallowDelete\n : false,\n    \nallowDownload\n : false,\n    \nallowUpload\n : false,\n    \nallowJsLink\n : true,\n    \nparameters\n : {\n      \nparam1\n : \nparamvalue1\n,\n      \nparam2\n : \nparamvalue2\n\n    }\n  } ] \n\n\n\n\nappletClass\n This is the \"main\" class of your Java Applet, which extends \njava.applet.Applet\n class.\n\n\nparameters\n For setting custom applet parameters. \n\n\n\n\nNote: rest of the properties are documented in \nswing application setup page",
            "title": "Java Applets"
        },
        {
            "location": "/app/applet/#java-applet-configuration",
            "text": "Webswing now offers a solution for running applets in web browser after the support of java plugins are slowly being discontinued in modern browsers. Java applets are not supported any more in current versions of Chrome browser:  NPAPI support removed from Chrome .  Webswing offers a easy way to continue using your applets on your page the same way you did before, but more securely and reliably. No more strugling with getting your applet to run for clients. Here is how it works.  Applets support:     Embeding to your web page  Java  -  Javascript interface",
            "title": "Java Applet configuration"
        },
        {
            "location": "/app/applet/#setup-your-applet-in-webswing-server",
            "text": "In Admin console you can set up your java applet in  Settings  -   Server configuration  -   Applets . Most of the settings in the panel are same as with standard  Swing applications , the only diference is in  Java settings  tab, where you set up your  appletClass  and additional  parameters  for applets.   This is how a sample java applet configuration looks like in json:  applets  : [ {\n     name  :  SwingSet3 applet ,\n     icon  :  ${user.dir}/demo/SwingSet3/icon.png ,\n     appletClass  :  org.webswing.demo.applet.SwingSet3Applet ,\n     classPathEntries  : [  ${user.dir}/demo/SwingSet3/SwingSet3.jar ,  ${user.dir}/demo/SwingSet3/lib/*.jar  ],\n     vmArgs  :  -Xmx128m -DauthorizedUser=${user} ,\n     homeDir  :  demo/SwingSet3/${user} ,\n     maxClients  : -1,\n     antiAliasText  : true,\n     swingSessionTimeout  : 100,\n     authorization  : false,\n     isolatedFs  : true,\n     debug  : true,\n     authentication  : false,\n     directdraw  : false,\n     allowDelete  : false,\n     allowDownload  : false,\n     allowUpload  : false,\n     allowJsLink  : true,\n     parameters  : {\n       param1  :  paramvalue1 ,\n       param2  :  paramvalue2 \n    }\n  } ]   appletClass  This is the \"main\" class of your Java Applet, which extends  java.applet.Applet  class.  parameters  For setting custom applet parameters.    Note: rest of the properties are documented in  swing application setup page",
            "title": "Setup your applet in webswing server"
        },
        {
            "location": "/app/integration/",
            "text": "Filesystem\n\uf0c1\n\n\nSwing application running inside Webswing are ultimately using filesystem of server where Webswing is running. This cause problems to applications that consume or generate files and interact with file system. \n\n\nWebswing solves this problem by providing an automatic \nJFileChooser\n integration dialog, which offers users ability to interact with server's file system by \nuploading, downloading and deleting\n files from browser.\n\n\n\n\nPermissions\n\n\nIt is possible to disable upload, download or deleting of files in in \nSecurity\n tab of application settings in Admin console.\n\n\nIsolated filesystem\n\n\nIf the users are not supposed to have access to full servers filesystem, Webswing offers option to limit the access to isolated folder which they are allowed to interact with. This setting \nisolatedFs\n can be set in \nSecurity\n tab of application settings in Admin console. If it is enabled, user will only see folder \n\"upload\"\n in \nhomeDir\n folder.\n\n\n\n\nPrinting\n\uf0c1\n\n\nWebswing implements seamless printing support, which works out of the box without any change needed in your application. \nWebswing generates a pdf from the printed document and opens it in new browser tab using \nPDF.js\n viewer.\n\n\nPrinting integration chandles printing using:\n\n\n\n\nToolkit.getDefaultToolkit().getPrintJob() method\n\n\nPrinterJob.getPrinterJob()\n\n\nmulti paged documents\n\n\nlandscape and portrait orientation\n\n\n\n\nPrinting is demonstrated in SwingSet3 demo with sample source codes included. \n\n\n\n\nClipboard\n\uf0c1\n\n\nWebswing has a built-in clipboard integration. Due to various browser security limitations some clipboard operations are limited at the moment. \n\n\nCopy\n\uf0c1\n\n\nWhen user triggers copy operation from swing application by pressing \nctrl+c\n or in menu option, webswing analyzes the data written to clipboard and notifies the client what type of data is available in clipboard by small dialog.\n\n\nWebswing recognizes 5 basic types. \n\n\n\n\nPlain text \n\n\nHTML  \n\n\nImage \n\n\nFiles \n\n\nOther (ie. application specific types)\n\n\n\n\nThis dialog only informs the user that data is available in swing clipboard. To copy the \nPlain text\n or \nHTML\n type to local clipboard user has to press \nctrl+c\n again while the dialog is visible. For copying the \nimage\n user has to use the browser default behavior to copy the image to local clipboard. \n\n\nIf the swing clipboard contains \nfiles\n and \nallowDownload\n option is enabled, user will be presented with list links allowing to download those files from Swing application. \n\n\n\n\nNote: \nisolatedFs\n option does not apply here. Access is not limited to files in isolated folder.\n\n\n\n\nPaste\n\uf0c1\n\n\nPaste operation can be triggered by \nctrl+v\n keyboard shortcut. But here it gets a little tricky, because we have our swing clipboard data sitting on the server and we have a local browser clipboard data. So we need to decide which one to use for the paste operation.    \n\n\nSolution is simple. If the clipboard dialog is open we use the Swing clipboard, because we know user has just coppied some data there. If the clipboard is not visible, we try to get the data from local browser clipboard. \n\n\n\n\n\n\nNote: if paste operation is trigered from context menu, it will always use the swing clipboard data. \n\n\n\n\nPasting from swing clipboard\n\nAll types are accessible to application if pasting from swing clipboard. \n\n\nPasting from local browser clipboard\n\nSee the following matrix for supported types based on browser.   \n\n\n\n\n\n\n\n\nBrowser\n\n\nSupported content types\n\n\n\n\n\n\n\n\n\n\nChrome\n\n\nPlain text, HTML, Images\n\n\n\n\n\n\nFirefox\n\n\nPlain text, HTML\n\n\n\n\n\n\nIE\n\n\nPlain text, HTML\n\n\n\n\n\n\n\n\njava.awt.Desktop\n\uf0c1\n\n\nThe AWT framework Desktop class is the default interface for triggering OS specific operations like edit file or open link. Webswing implements this interface and interprets these commands in web browser friendly way. \n\n\n\n\n\n\n\n\nMethod\n\n\nWebswing operation\n\n\n\n\n\n\n\n\n\n\nbrowse\n\n\nOpens the specified link in new tab\n\n\n\n\n\n\nedit\n\n\nReferenced file is downloaded\n\n\n\n\n\n\nmail\n\n\nOpens a new email window in default mail client\n\n\n\n\n\n\nopen\n\n\nReferenced file is downloaded\n\n\n\n\n\n\nprint\n\n\nReferenced file is downloaded",
            "title": "Desktop Integration"
        },
        {
            "location": "/app/integration/#filesystem",
            "text": "Swing application running inside Webswing are ultimately using filesystem of server where Webswing is running. This cause problems to applications that consume or generate files and interact with file system.   Webswing solves this problem by providing an automatic  JFileChooser  integration dialog, which offers users ability to interact with server's file system by  uploading, downloading and deleting  files from browser.   Permissions  It is possible to disable upload, download or deleting of files in in  Security  tab of application settings in Admin console.  Isolated filesystem  If the users are not supposed to have access to full servers filesystem, Webswing offers option to limit the access to isolated folder which they are allowed to interact with. This setting  isolatedFs  can be set in  Security  tab of application settings in Admin console. If it is enabled, user will only see folder  \"upload\"  in  homeDir  folder.",
            "title": "Filesystem"
        },
        {
            "location": "/app/integration/#printing",
            "text": "Webswing implements seamless printing support, which works out of the box without any change needed in your application. \nWebswing generates a pdf from the printed document and opens it in new browser tab using  PDF.js  viewer.  Printing integration chandles printing using:   Toolkit.getDefaultToolkit().getPrintJob() method  PrinterJob.getPrinterJob()  multi paged documents  landscape and portrait orientation   Printing is demonstrated in SwingSet3 demo with sample source codes included.",
            "title": "Printing"
        },
        {
            "location": "/app/integration/#clipboard",
            "text": "Webswing has a built-in clipboard integration. Due to various browser security limitations some clipboard operations are limited at the moment.   Copy \uf0c1  When user triggers copy operation from swing application by pressing  ctrl+c  or in menu option, webswing analyzes the data written to clipboard and notifies the client what type of data is available in clipboard by small dialog.  Webswing recognizes 5 basic types.    Plain text   HTML    Image   Files   Other (ie. application specific types)   This dialog only informs the user that data is available in swing clipboard. To copy the  Plain text  or  HTML  type to local clipboard user has to press  ctrl+c  again while the dialog is visible. For copying the  image  user has to use the browser default behavior to copy the image to local clipboard.   If the swing clipboard contains  files  and  allowDownload  option is enabled, user will be presented with list links allowing to download those files from Swing application.    Note:  isolatedFs  option does not apply here. Access is not limited to files in isolated folder.   Paste \uf0c1  Paste operation can be triggered by  ctrl+v  keyboard shortcut. But here it gets a little tricky, because we have our swing clipboard data sitting on the server and we have a local browser clipboard data. So we need to decide which one to use for the paste operation.      Solution is simple. If the clipboard dialog is open we use the Swing clipboard, because we know user has just coppied some data there. If the clipboard is not visible, we try to get the data from local browser clipboard.     Note: if paste operation is trigered from context menu, it will always use the swing clipboard data.    Pasting from swing clipboard \nAll types are accessible to application if pasting from swing clipboard.   Pasting from local browser clipboard \nSee the following matrix for supported types based on browser.        Browser  Supported content types      Chrome  Plain text, HTML, Images    Firefox  Plain text, HTML    IE  Plain text, HTML",
            "title": "Clipboard"
        },
        {
            "location": "/app/integration/#javaawtdesktop",
            "text": "The AWT framework Desktop class is the default interface for triggering OS specific operations like edit file or open link. Webswing implements this interface and interprets these commands in web browser friendly way.      Method  Webswing operation      browse  Opens the specified link in new tab    edit  Referenced file is downloaded    mail  Opens a new email window in default mail client    open  Referenced file is downloaded    print  Referenced file is downloaded",
            "title": "java.awt.Desktop"
        },
        {
            "location": "/app/browser/",
            "text": "Webswing URL parameters\n\uf0c1\n\n\nWhen you start Webswing it will be available on \nhttp://localhost:8080\n. The page served on this URL (\nindex.html\n) allows you to change some of the default behavior using URL parameters. \n\n\nFollowing configurations are available by default:\n\n\nPreselected aplication (skip app selection screen)\n\uf0c1\n\n\nhttp://localhost:8080?app=SwingSet3\n : for selecting the application to run. If this parameter is specified, dialog with list of swing applications will be skipped. \nname\n is the swing application name as specified in \nwebswing.config\n file.\n\n\nAdditional application arguments\n\uf0c1\n\n\nhttp://localhost:8080?args=arg1,arg2\n : for specifying additional arguments for the swing application. Value of this parameter will be available in \n${customArgs}\n variable that can be used in \nwebswing.config\n file.\n\n\nAnonymous access (skip login screen)\n\uf0c1\n\n\nhttp://localhost:8080?anonym=true\n : tells the server to authenticate the application with anonymous user. This user has access only to applications with \nauthentication\n and \nauthorization\n set to \nfalse\n in \nwebswing.config\n file. \n\n\nDisable binary socket\n\uf0c1\n\n\nhttp://localhost:8080?binarySocket=false\n : Binary socket is enabled by default. If you wish to use json for transfering data through websocket, set this option to false.\n\n\nSession recording\n\uf0c1\n\n\nhttp://localhost:8080?recording=true\n : if recording is enabled, webswing will create a recording file in temp foler, which can be later used for replay of the application frame by frame just like a movie.\n\n\nSession playback\n\uf0c1\n\n\nhttp://localhost:8080?recordingPlayback=path/to/recordingFile.wss\n : This option can be used to play the recording file. This option is internaly used in Admin console for playback of finished sessions. Only users with admin role are allowed to playback recordings.\n\n\nDebugging\n\uf0c1\n\n\nhttp://localhost:8080?debugPort=8000\n : See \ndebuging guide\n\n\nURL parameters can be combined together.\n\n\nIf your deployment has other specific requirements which are not achievable by this set of parameters, you can embed Webswing's javascript snippet to your own web page, where you have full control and ability to further customize the behavior.\n\n\nEmbeding to web page\n\uf0c1\n\n\nWith Webswing it is possible to embed your swing application to your own webpage. Good example is the default Webswing page or Admin console mirror view feature, where Webswing javascript is embeded in same like in below snippet. You can copy this snippet to your webpage: \n\n\ndiv \n style=\nheight:500px;\n \n data-webswing-instance=\nwebswing\n \n data-webswing-options=\n{autoStart:true,  anonym:true,  args:'foo',  applicationName:'SwingSet3', connectionUrl:'http://\nwebswing-host-and-port\n'}\n\n\n/div\n\n\n\nscript data-webswing-global-var=\nwebswingControll\n\n (function (window, document) {\n  var loader = function () {\n   var script = document.createElement(\nscript\n), tag = document.getElementsByTagName(\nscript\n)[0];\n   script.src =  \nhttp://\nwebswing-host-and-port\n/javascript/webswing-embed.js\n;\n   tag.parentNode.insertBefore(script, tag);\n  };\n  window.addEventListener ? window.addEventListener(\nload\n, loader, false) : window.attachEvent(\nonload\n, loader);\n })(window, document);\n\n/script\n\n\n\n\n\nThere are few things you need to configure in the snippet. Most important is to replace the 2  \nwebswing-host-and-port\n placeholders with the location of your webswing deployment. For example \nlocalhost:8080\n if using the default settings. \n\n\nThe \ndata-webswing-instance=\"my-webswing\"\n attribute tells the javascript to use this div element as webswing instance. Name of the instance \n\"my-webswing\"\n will be used as name for global object variable with functions controlling this instance. Following functions are available in this global object: \n\n\n\n\nconfigure(options)\n - configures this instance. This function read the options from \ndata-webswing-options\n attribute if no argument is passed in. Argument \noptions\n is object with following properties:\n\n\nautoStart\n  - tells webswing to execute configure() and start() right after the instance is initialized. If it is false, start() function has to be triggered manually. This option only valid if set up in \ndata-webswing-options\n attribute\n\n\napplicationName\n - Preselects the swing application and skips selection screen\n\n\nargs\n - additional java application arguments. Appended to those defined in configuration.\n\n\nanonym\n - skip login for applications that allows anonymous access (default:false)\n\n\nbinarySocket\n - use binary transfer in websocket - saves bandwidth (default:true)\n\n\nrecording\n - record this application session (default:false)\n\n\nclientId\n - set the clientId, used with mirror session or to continue running session. \n\n\nmirror\n - for starting a mirror session. Only admin role is allowed to use this (default:false)\n\n\nconnectionUrl\n - base url for connecting to websocket service. (default: current location url) \n\n\ndebugPort\n - integer that specifies on which port should the debugger listen. See development docs for more information.\n\n\njavaCallTimeout\n - JsLink java method invocation timeout. If java method is not returned with result, error is logged to browser console.  \n\n\nrecordingPlayback\n - File for session recording playback. Only admin role alowed to use this.\n\n\nappletParams\n - Applet parameters. Ignored if swing application is not applet.\n\n\n\n\n\n\ndisconnect()\n - disconnects the current webswing session, but leaving the swing application running. \n\n\nkill()\n - disconnects the current webswing session with stopping the swing application. \n\n\nsetControl(boolean)\n - enables/disables the control of application. If set to false, no user events are sent to swing application.\n\n\nstart()\n - This will initiate the connection to webswing server and start the swing application. If the \nautoStart\n is set to false or not defined in \ndata-webswing-options\n, start function has to be called manually, otherwise the javascript will call start function automatically. \n\n\n\n\nThe \ndata-webswing-options\n attribute is used to configure the instance. Javascirpt object notation is expected with properties listed in \nconfigure(options)\n function description. \n\n\nYou can control the size of the div element where webswing is displayed with regular CSS . You can even change the size of the div dynamically and Webswing canavs will automatically scale. \n\n\nIf you are embedding webswing to page on different domain, you will have to enable Cross-origin resource sharing (\nCORS\n), either in \njetty.properties\n file or using the \nwebswing.corsOrigins\n system property. Set \n*\n to allow all domains, or use comma separated list of allowed domains. \n\n\nBootstraping Webswing javascript\n\uf0c1\n\n\nWhen the Webswing javascript is loaded it will scan the DOM for div elements with attribute \ndata-webswing-instance\n and will initialize them automatically. For use cases when webswing instance has to be started later it is possible to export global webswing variable exposing the bootstraping API. \nBy definig attribute \ndata-webswing-global-var=\"webswingControl\"\n on the \nscript\n element of embeded snippet, you tell webswing to create a global variable called \nwebswingControl\n which has following functions: \n\n\n\n\nscan()\n - re-runs the full DOM search for \ndata-webswing-instance\n attribute.\n\n\nbootstrap(divElement)\n - instantiate webswing in div element specified in argument.",
            "title": "Embeding and URL settings"
        },
        {
            "location": "/app/browser/#webswing-url-parameters",
            "text": "When you start Webswing it will be available on  http://localhost:8080 . The page served on this URL ( index.html ) allows you to change some of the default behavior using URL parameters.   Following configurations are available by default:  Preselected aplication (skip app selection screen) \uf0c1  http://localhost:8080?app=SwingSet3  : for selecting the application to run. If this parameter is specified, dialog with list of swing applications will be skipped.  name  is the swing application name as specified in  webswing.config  file.  Additional application arguments \uf0c1  http://localhost:8080?args=arg1,arg2  : for specifying additional arguments for the swing application. Value of this parameter will be available in  ${customArgs}  variable that can be used in  webswing.config  file.  Anonymous access (skip login screen) \uf0c1  http://localhost:8080?anonym=true  : tells the server to authenticate the application with anonymous user. This user has access only to applications with  authentication  and  authorization  set to  false  in  webswing.config  file.   Disable binary socket \uf0c1  http://localhost:8080?binarySocket=false  : Binary socket is enabled by default. If you wish to use json for transfering data through websocket, set this option to false.  Session recording \uf0c1  http://localhost:8080?recording=true  : if recording is enabled, webswing will create a recording file in temp foler, which can be later used for replay of the application frame by frame just like a movie.  Session playback \uf0c1  http://localhost:8080?recordingPlayback=path/to/recordingFile.wss  : This option can be used to play the recording file. This option is internaly used in Admin console for playback of finished sessions. Only users with admin role are allowed to playback recordings.  Debugging \uf0c1  http://localhost:8080?debugPort=8000  : See  debuging guide  URL parameters can be combined together.  If your deployment has other specific requirements which are not achievable by this set of parameters, you can embed Webswing's javascript snippet to your own web page, where you have full control and ability to further customize the behavior.",
            "title": "Webswing URL parameters"
        },
        {
            "location": "/app/browser/#embeding-to-web-page",
            "text": "With Webswing it is possible to embed your swing application to your own webpage. Good example is the default Webswing page or Admin console mirror view feature, where Webswing javascript is embeded in same like in below snippet. You can copy this snippet to your webpage:   div \n style= height:500px;  \n data-webswing-instance= webswing  \n data-webswing-options= {autoStart:true,  anonym:true,  args:'foo',  applicationName:'SwingSet3', connectionUrl:'http:// webswing-host-and-port '}  /div  script data-webswing-global-var= webswingControll \n (function (window, document) {\n  var loader = function () {\n   var script = document.createElement( script ), tag = document.getElementsByTagName( script )[0];\n   script.src =   http:// webswing-host-and-port /javascript/webswing-embed.js ;\n   tag.parentNode.insertBefore(script, tag);\n  };\n  window.addEventListener ? window.addEventListener( load , loader, false) : window.attachEvent( onload , loader);\n })(window, document); /script   There are few things you need to configure in the snippet. Most important is to replace the 2   webswing-host-and-port  placeholders with the location of your webswing deployment. For example  localhost:8080  if using the default settings.   The  data-webswing-instance=\"my-webswing\"  attribute tells the javascript to use this div element as webswing instance. Name of the instance  \"my-webswing\"  will be used as name for global object variable with functions controlling this instance. Following functions are available in this global object:    configure(options)  - configures this instance. This function read the options from  data-webswing-options  attribute if no argument is passed in. Argument  options  is object with following properties:  autoStart   - tells webswing to execute configure() and start() right after the instance is initialized. If it is false, start() function has to be triggered manually. This option only valid if set up in  data-webswing-options  attribute  applicationName  - Preselects the swing application and skips selection screen  args  - additional java application arguments. Appended to those defined in configuration.  anonym  - skip login for applications that allows anonymous access (default:false)  binarySocket  - use binary transfer in websocket - saves bandwidth (default:true)  recording  - record this application session (default:false)  clientId  - set the clientId, used with mirror session or to continue running session.   mirror  - for starting a mirror session. Only admin role is allowed to use this (default:false)  connectionUrl  - base url for connecting to websocket service. (default: current location url)   debugPort  - integer that specifies on which port should the debugger listen. See development docs for more information.  javaCallTimeout  - JsLink java method invocation timeout. If java method is not returned with result, error is logged to browser console.    recordingPlayback  - File for session recording playback. Only admin role alowed to use this.  appletParams  - Applet parameters. Ignored if swing application is not applet.    disconnect()  - disconnects the current webswing session, but leaving the swing application running.   kill()  - disconnects the current webswing session with stopping the swing application.   setControl(boolean)  - enables/disables the control of application. If set to false, no user events are sent to swing application.  start()  - This will initiate the connection to webswing server and start the swing application. If the  autoStart  is set to false or not defined in  data-webswing-options , start function has to be called manually, otherwise the javascript will call start function automatically.    The  data-webswing-options  attribute is used to configure the instance. Javascirpt object notation is expected with properties listed in  configure(options)  function description.   You can control the size of the div element where webswing is displayed with regular CSS . You can even change the size of the div dynamically and Webswing canavs will automatically scale.   If you are embedding webswing to page on different domain, you will have to enable Cross-origin resource sharing ( CORS ), either in  jetty.properties  file or using the  webswing.corsOrigins  system property. Set  *  to allow all domains, or use comma separated list of allowed domains.",
            "title": "Embeding to web page"
        },
        {
            "location": "/app/browser/#bootstraping-webswing-javascript",
            "text": "When the Webswing javascript is loaded it will scan the DOM for div elements with attribute  data-webswing-instance  and will initialize them automatically. For use cases when webswing instance has to be started later it is possible to export global webswing variable exposing the bootstraping API. \nBy definig attribute  data-webswing-global-var=\"webswingControl\"  on the  script  element of embeded snippet, you tell webswing to create a global variable called  webswingControl  which has following functions:    scan()  - re-runs the full DOM search for  data-webswing-instance  attribute.  bootstrap(divElement)  - instantiate webswing in div element specified in argument.",
            "title": "Bootstraping Webswing javascript"
        },
        {
            "location": "/app/jslink/",
            "text": "Overview\n\uf0c1\n\n\nWebswing offers javascript integration API, which allows invoking javascript functions from swing application code and vice versa.\n\n\nSimilar functionality is available to Applets and to make the transition to Webswing as easy as possible Webswing supports the same standard API available for Applets \ndocumented here\n. In Webswing this API is available to all application.  \n\n\nYou can see this feature in action in the extended SwingSet3 demo application included in Webswing distribution. It demonstrates basic use case scenarios as calling java service from javascirpt or using javascript function callback from java. \n\n\n\n\nEval Javascript from Swing\n\uf0c1\n\n\nLets start with a simple case of evaluating javascript snippet from Swing app.\n\n\nFirst, we need to get instance of \nnetscape.javascript.JSObject\n class. We can use the standard static method as documented by Oracle. Only difference is that in Webswing we don't need to pass the Applet instance as the parameter. This way it is available for non-applet swing applications as well. \n\n\n\n\nNote: for development you can use the \nlib/plugin.jar\n from your JRE, but use it only as compile time dependency. Do not include it in your build. \n\n\n\n\nJSObject global = JSObject.getWindow(null);\n\n\n\n\nThe variable \nglobal\n now represents the javascript global object. Now we can evaluate any Javascript on this object. \n\n\nObject res = global.eval(\nvar hello = 'Hello world'; return hello;\n);\nassert res instanceof String \n assert res.equals(\nHello world\n);\n\n\n\n\nThis is the simplest possible example of invoking javascript from Webswing. \nSo lets see what happens under the hoods. The \neval\n method will send a message to browser through websocket channel and current thread goes to sleep until the evaluation response message is received. \nIf the evaluation fails or is not received in 3 seconds \nnetscape.javascript.JSException\n is thrown. \n\n\n\n\nNote: Evaluation timeout is set to 3 seconds by default. It can be changed by setting \nwebswing.syncCallTimeout\n system property (in miliseconds).\n\n\n\n\nJavascript Return Type Mapping\n\n\n\n\n\n\n\n\nJavascript  type\n\n\nJava Type\n\n\n\n\n\n\n\n\n\n\nnull or undefined\n\n\nnull\n\n\n\n\n\n\nnumber\n\n\njava.lang.Number\n\n\n\n\n\n\nstring\n\n\njava.lang.String\n\n\n\n\n\n\nboolean\n\n\njava.lang.Boolean\n\n\n\n\n\n\nJavaObjectRef*\n\n\nrefered Java object\n\n\n\n\n\n\nother\n\n\nnetscape.javascript.JSObject\n\n\n\n\n\n\n\n\n*JavaObjectRef is javascript object created by this API when Java object is passed to javascript using \nsetMember\n, \nsetSlot\n or \ncall\n methods. See Invoking Java from Javascript chapter\n\n\n\n\nTip: When returning data from eval. Serialize them to json rather then sending a javascript object directly. Querying the content using \nJSObject\n interface is costly as each method call requires a server roundtrip.\n\n\n\n\nJSObject methods \n[javadoc]\n\n\n\n\n\n\n\n\nMethod name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neval\n\n\nEvaluates the javascript in argument and returns result.\n\n\n\n\n\n\ncall\n\n\ncalls a function on object represented by this JSObject.\n\n\n\n\n\n\nsetMember\n\n\ncreates or sets property on object represented by this JSObject with value from agument.\n\n\n\n\n\n\ngetMember\n\n\nreturns property from object represented by this JSObject.\n\n\n\n\n\n\nremoveMember\n\n\ndeletes property from object represented by this JSObject.\n\n\n\n\n\n\nsetSlot\n\n\nsets value of array represented by this JSObject on specified index.\n\n\n\n\n\n\ngetSlot\n\n\nreturns the value from array represented by this JSObject on specified index.\n\n\n\n\n\n\n\n\nInvoking Java from Javascript\n\uf0c1\n\n\nBefore we can make any Java calls from Javascript we need to expose a Java object instance and store a reference to it in variable. \nAssume we have a singleton \nPingService\n class with one method called \nping()\n which we want to call from javascript. Let's expose this service to javascipt:\n\n\npublic class PingService{\n    static PingService singleton = new PingService();\n\n    public String ping(){\n        return \npong\n;\n    }\n}\n\nJSObject global = JSObject.getWindow(null);\nglobal.setMember(\npingService\n, PingService.singleton);\n\n\n\n\nThe above \nsetMember\n method will send a singleton's object reference to javascript and expose all his \npublic\n methods as javascript functions. This singleton reference will be stored in \npingService\n property of global object.  \n\n\n\n\nNote: Make sure you keep a reference to your service object in java to avoid garbage collection, otherwise you will get exception when calling service from javascript. \n\n\n\n\nNow let's call the \nping\n method from javascript. As you can see below the \nping\n function does not return the result directly, but it returns a \nPromise\n, which resolves to value returned by java method. If the result is not returned from java within 3 seconds or the java method throws an exception, the promise is rejected and the error is handled in the catch block. \n\n\npingService.ping().then(\n    function(result){\n        alert(result);\n    }\n).catch(\n    function(error){\n        console.log(error);\n    }\n)\n\n\n\n\n\n\nNote: To adjust the java call timeout limit, set the \njavaCallTimeout\n property to your webswing javascipt. \nSee embeding documentation\n\n\n\n\nApplet specifics\n\uf0c1\n\n\nTo simplify transition of Applets, Webswing will automatically expose the Applet object to javascript. Applet object reference will be stored in the webswing instance variable as defined by \ndata-webswing-instance=\"myWebswing\"\n element atribute (\nSee embeding documentation\n). For example:\n\n\nmyWebswing.applet.getAppletInfo().then(\n    function(result){\n        alert(\nmy applet info:\n+result);\n    }\n)\n\n\n\n\nSecurity configuration\n\uf0c1\n\n\nJsLink framework can be disabled in webswing configuration by setting the \nallowJsLink\n property to false.",
            "title": "JsLink: java <-> javascript"
        },
        {
            "location": "/app/jslink/#overview",
            "text": "Webswing offers javascript integration API, which allows invoking javascript functions from swing application code and vice versa.  Similar functionality is available to Applets and to make the transition to Webswing as easy as possible Webswing supports the same standard API available for Applets  documented here . In Webswing this API is available to all application.    You can see this feature in action in the extended SwingSet3 demo application included in Webswing distribution. It demonstrates basic use case scenarios as calling java service from javascirpt or using javascript function callback from java.",
            "title": "Overview"
        },
        {
            "location": "/app/jslink/#eval-javascript-from-swing",
            "text": "Lets start with a simple case of evaluating javascript snippet from Swing app.  First, we need to get instance of  netscape.javascript.JSObject  class. We can use the standard static method as documented by Oracle. Only difference is that in Webswing we don't need to pass the Applet instance as the parameter. This way it is available for non-applet swing applications as well.    Note: for development you can use the  lib/plugin.jar  from your JRE, but use it only as compile time dependency. Do not include it in your build.    JSObject global = JSObject.getWindow(null);  The variable  global  now represents the javascript global object. Now we can evaluate any Javascript on this object.   Object res = global.eval( var hello = 'Hello world'; return hello; );\nassert res instanceof String   assert res.equals( Hello world );  This is the simplest possible example of invoking javascript from Webswing. \nSo lets see what happens under the hoods. The  eval  method will send a message to browser through websocket channel and current thread goes to sleep until the evaluation response message is received. \nIf the evaluation fails or is not received in 3 seconds  netscape.javascript.JSException  is thrown.    Note: Evaluation timeout is set to 3 seconds by default. It can be changed by setting  webswing.syncCallTimeout  system property (in miliseconds).   Javascript Return Type Mapping     Javascript  type  Java Type      null or undefined  null    number  java.lang.Number    string  java.lang.String    boolean  java.lang.Boolean    JavaObjectRef*  refered Java object    other  netscape.javascript.JSObject     *JavaObjectRef is javascript object created by this API when Java object is passed to javascript using  setMember ,  setSlot  or  call  methods. See Invoking Java from Javascript chapter   Tip: When returning data from eval. Serialize them to json rather then sending a javascript object directly. Querying the content using  JSObject  interface is costly as each method call requires a server roundtrip.   JSObject methods  [javadoc]     Method name  Description      eval  Evaluates the javascript in argument and returns result.    call  calls a function on object represented by this JSObject.    setMember  creates or sets property on object represented by this JSObject with value from agument.    getMember  returns property from object represented by this JSObject.    removeMember  deletes property from object represented by this JSObject.    setSlot  sets value of array represented by this JSObject on specified index.    getSlot  returns the value from array represented by this JSObject on specified index.",
            "title": "Eval Javascript from Swing"
        },
        {
            "location": "/app/jslink/#invoking-java-from-javascript",
            "text": "Before we can make any Java calls from Javascript we need to expose a Java object instance and store a reference to it in variable. \nAssume we have a singleton  PingService  class with one method called  ping()  which we want to call from javascript. Let's expose this service to javascipt:  public class PingService{\n    static PingService singleton = new PingService();\n\n    public String ping(){\n        return  pong ;\n    }\n}\n\nJSObject global = JSObject.getWindow(null);\nglobal.setMember( pingService , PingService.singleton);  The above  setMember  method will send a singleton's object reference to javascript and expose all his  public  methods as javascript functions. This singleton reference will be stored in  pingService  property of global object.     Note: Make sure you keep a reference to your service object in java to avoid garbage collection, otherwise you will get exception when calling service from javascript.    Now let's call the  ping  method from javascript. As you can see below the  ping  function does not return the result directly, but it returns a  Promise , which resolves to value returned by java method. If the result is not returned from java within 3 seconds or the java method throws an exception, the promise is rejected and the error is handled in the catch block.   pingService.ping().then(\n    function(result){\n        alert(result);\n    }\n).catch(\n    function(error){\n        console.log(error);\n    }\n)   Note: To adjust the java call timeout limit, set the  javaCallTimeout  property to your webswing javascipt.  See embeding documentation",
            "title": "Invoking Java from Javascript"
        },
        {
            "location": "/app/jslink/#applet-specifics",
            "text": "To simplify transition of Applets, Webswing will automatically expose the Applet object to javascript. Applet object reference will be stored in the webswing instance variable as defined by  data-webswing-instance=\"myWebswing\"  element atribute ( See embeding documentation ). For example:  myWebswing.applet.getAppletInfo().then(\n    function(result){\n        alert( my applet info: +result);\n    }\n)",
            "title": "Applet specifics"
        },
        {
            "location": "/app/jslink/#security-configuration",
            "text": "JsLink framework can be disabled in webswing configuration by setting the  allowJsLink  property to false.",
            "title": "Security configuration"
        },
        {
            "location": "/dev/development/",
            "text": "Development guide\n\uf0c1\n\n\nIf you would like to join the project and fix a bug or add new feature, this quick start guide may help you do it.\n\n\nSetup development environment\n\uf0c1\n\n\nSetting up development is easy. Just follow these steps:\n\n\n\n\n\n\nFork the project on Bitbucket\n \n(fork webswing)\n. If you only want to play around you can skip this step and use the master branch or any version tag in the Checkout step.\n\n\n\n\n\n\nCheckout code\n with your favorite Git client. If you don't have your own fork you can checkout master branch here.\n\n\n\n\n\n\nInstall\n supported version of \nJDK and Maven\n. (Maven has to be configured to run with supported JDK otherwise you may encounter compilation errors)\n\n\n\n\n\n\nImport to your favorite IDE as maven projects.\n\n\n\n\n\n\n\n\nNote: JDK8 and Maven3 are needed for building Webswing. If you are using Linux, only 64-bit version is working at the moment.\n\n\n\n\nBuilding Webswing\n\uf0c1\n\n\nMaven is used for building Webswing. To trigger build run following command from the repository root folder: \n\n\nmvn -Pbuild,release clean install\n\n\n\n\nHere we are running the build with two profiles. Profile \nbuild\n is the default profile and active by default and tells maven how to package everything. Profile \nrelease\n only adds a javascript minification step to build. \n\n\nResult of the build is located in \nwebswing-assembly/dist\n folder.\n\n\nOne more special profile is available in the maven configuration:\n\n\nmvn -Pdev clean install\n\n\n\n\nRunning the build with profile \ndev\n will directly start jetty in the maven. Huge advantage of this profile is that changes of javascript files (those located in \nwebswing-server\n project) are picked up immediately without restart of jetty.  \n\n\nProject structure\n\uf0c1\n\n\nWebswing is developed as standard modular maven project with seven separate maven modules within parent project. Following picture shows the structure of maven modules/projects.\n\n\nwebswing\n is the parent maven project that contains all modules.\n\n\ndocumentation\n folder contains source files for this documentation.\n\n\nwebswing-admin\n is the Admin console implementation. \n\n\nwebswing-app-toolkit\n module contains the custom implementation of java.awt.Toolkit called WebToolkit. This project must not contain any external dependencies, because it is part of boot classpath when running the swing application instance. This module contains also model classes for communication with web.\n\n\nwebswing-app-toolkit-java6\n, \nwebswing-app-toolkit-java7\n and \nwebswing-app-toolkit-java8\n  module implements java version specific methods and interfaces.  \n\n\nwebswing-app-launcher\n module takes care of correct initialization of swing application's classpath and executing the main method of the swing application in special webswing classloader.\n\n\nwebswing-app-interface\n module isolates all necessary dependencies like JMS client and pdf generation libraries. This is necessary to avoid classpath polution of swing applications, which may lead to classloading issues.\n\n\nwebswing-server\n project is the most important project responsible for managing webswing sessions. This project contains the web application files (javascript) for displaying swing applications in browser and also the admin console sources. This project generates the executable war archive which packages the rest of the webswing projects and its dependencies.\n\n\nwebswing-server-launcher\n module is responsible for launching the embedded jetty server and deploying the webswing-server.war web application in it. This module also parses the command-line options.\n\n\nwebswing-directdraw\n module implements the new rendering method, which streams the swing rendered image as canvas paint instructions instead of png files. \n\n\nwebswing-assembly\n module is used to create distribution package with demo application and start scripts and default configuration files.\n\n\nPackaging structure\n\uf0c1\n\n\nWebswing uses maven to create an executable war archive with embedded jetty server. The build process for the war file is defined in \nwebswing-server\n project's \npom.xml\n file. This pom file defines dependency on libraries used across all modules and the packaging process then sorts them to three separate categories (folders within the war file).\n\n\n\n\n\n\nSwing instance dependencies\n are stored in \n/WEB-INF/swing-lib/\n directory. These libraries are used by the webswing-app-interface project to allow communication with JMS queues, encode png images or generate pdf files.\n\n\n\n\n\n\nJetty Web server dependencies\n are stored in \n/WEB-INF/server-lib/\n folder. These libraries are the embedded jetty server and the \nwebswing-server-launcher\n module, which takes care of starting this server.\n\n\n\n\n\n\nStandard web application dependencies\n are stored in \n/WEB-INF/lib/\n folder. These libraries are used by the \nwebswing-server\n web application for handling queries from browsers and passing rendered screen from swing instance to client's browser window.\n\n\n\n\n\n\nDependencies in classloading\n\uf0c1\n\n\nWebswing uses custom classloaders to achieve classpath isolation and also bytecode modifications where necessary. Following picture describes the way webswing loads swing applications:\n\n\n\n\nWebswing uses the same main.Main class to start the server and also to start swing instances. Based on input parameters, this class initializes the DefaultClassLoader classpath and delegates the initialization to the server launcher (webswing-server-launcher) or the swing launcher class (webswing-app-launcher).\n\n\nAbove picture shows the swing instance execution case, where the main.Main class creates also ExtLibClassLoader with classpath referring to /WEB-INF/swing-lib folder. After this classloader is created, singleton services (pdf generator, jms connection, etc.) are instantiated and injected to WebToolkit, which is used by swing applications.\n\n\nOne of the mentioned services is SwingClassloaderFactory, which instantiates the special classloader with bytecode instrumentation capabilities, which loads the swing application.\n\n\nDirectDraw rendering\n\uf0c1\n\n\nDirectDraw (DD) is the new way of rendering swing application to html canvas element. Compared to the old method, where the rendering is based on png images, this new way directly interprets the draw instructions on canvas. So the difference is similar as if you compare raster and vector graphics. DD should bring performance improvements in rendering speed and data transfer bandwidth size because it reduces the use of expensive png encoding. \n\n\nImplementation of DD is located in \nwebsiwng-directdraw\n module and its two sub-modules. \n\n\nwebswing-directdraw-server\n contains the server component, which is mainly the javascript for interpreting the swing draw instructions in html canvas. (\nwebswing-dd.js\n)\n\n\nwebswing-directdraw-swing\n is the library for swing application that allows to capture swing draw instructions and encode them into efficient binary format.\n\n\nDebugging\n\uf0c1\n\n\nIt is often necessary to debug swing application running within webswing to analyze eventual webswing specific problems. This is very easy with webswing. We assume that your application is already configured in webswing.config file. To debug your swing application follow this steps:\n\n\n\n\n\n\nOpen webswing.config file and change the \"debug\" property of your application to true.\n\n\n\n\n\n\nStart Webswing server as usual.\n\n\n\n\n\n\nOpen Webswing page with \ndebugPort\n url parameter (ie \nhttp://localhost:8080/?debugPort=8000\n, Login to Webswing and choose your application on application selection screen.\n\n\n\n\n\n\nYou will see log message in console saying that java process is waiting for debugger connection on port 8000. Now only set up your favorite debugger to connect to this port.",
            "title": "Development"
        },
        {
            "location": "/dev/development/#development-guide",
            "text": "If you would like to join the project and fix a bug or add new feature, this quick start guide may help you do it.",
            "title": "Development guide"
        },
        {
            "location": "/dev/development/#setup-development-environment",
            "text": "Setting up development is easy. Just follow these steps:    Fork the project on Bitbucket   (fork webswing) . If you only want to play around you can skip this step and use the master branch or any version tag in the Checkout step.    Checkout code  with your favorite Git client. If you don't have your own fork you can checkout master branch here.    Install  supported version of  JDK and Maven . (Maven has to be configured to run with supported JDK otherwise you may encounter compilation errors)    Import to your favorite IDE as maven projects.     Note: JDK8 and Maven3 are needed for building Webswing. If you are using Linux, only 64-bit version is working at the moment.",
            "title": "Setup development environment"
        },
        {
            "location": "/dev/development/#building-webswing",
            "text": "Maven is used for building Webswing. To trigger build run following command from the repository root folder:   mvn -Pbuild,release clean install  Here we are running the build with two profiles. Profile  build  is the default profile and active by default and tells maven how to package everything. Profile  release  only adds a javascript minification step to build.   Result of the build is located in  webswing-assembly/dist  folder.  One more special profile is available in the maven configuration:  mvn -Pdev clean install  Running the build with profile  dev  will directly start jetty in the maven. Huge advantage of this profile is that changes of javascript files (those located in  webswing-server  project) are picked up immediately without restart of jetty.",
            "title": "Building Webswing"
        },
        {
            "location": "/dev/development/#project-structure",
            "text": "Webswing is developed as standard modular maven project with seven separate maven modules within parent project. Following picture shows the structure of maven modules/projects.  webswing  is the parent maven project that contains all modules.  documentation  folder contains source files for this documentation.  webswing-admin  is the Admin console implementation.   webswing-app-toolkit  module contains the custom implementation of java.awt.Toolkit called WebToolkit. This project must not contain any external dependencies, because it is part of boot classpath when running the swing application instance. This module contains also model classes for communication with web.  webswing-app-toolkit-java6 ,  webswing-app-toolkit-java7  and  webswing-app-toolkit-java8   module implements java version specific methods and interfaces.    webswing-app-launcher  module takes care of correct initialization of swing application's classpath and executing the main method of the swing application in special webswing classloader.  webswing-app-interface  module isolates all necessary dependencies like JMS client and pdf generation libraries. This is necessary to avoid classpath polution of swing applications, which may lead to classloading issues.  webswing-server  project is the most important project responsible for managing webswing sessions. This project contains the web application files (javascript) for displaying swing applications in browser and also the admin console sources. This project generates the executable war archive which packages the rest of the webswing projects and its dependencies.  webswing-server-launcher  module is responsible for launching the embedded jetty server and deploying the webswing-server.war web application in it. This module also parses the command-line options.  webswing-directdraw  module implements the new rendering method, which streams the swing rendered image as canvas paint instructions instead of png files.   webswing-assembly  module is used to create distribution package with demo application and start scripts and default configuration files.",
            "title": "Project structure"
        },
        {
            "location": "/dev/development/#packaging-structure",
            "text": "Webswing uses maven to create an executable war archive with embedded jetty server. The build process for the war file is defined in  webswing-server  project's  pom.xml  file. This pom file defines dependency on libraries used across all modules and the packaging process then sorts them to three separate categories (folders within the war file).    Swing instance dependencies  are stored in  /WEB-INF/swing-lib/  directory. These libraries are used by the webswing-app-interface project to allow communication with JMS queues, encode png images or generate pdf files.    Jetty Web server dependencies  are stored in  /WEB-INF/server-lib/  folder. These libraries are the embedded jetty server and the  webswing-server-launcher  module, which takes care of starting this server.    Standard web application dependencies  are stored in  /WEB-INF/lib/  folder. These libraries are used by the  webswing-server  web application for handling queries from browsers and passing rendered screen from swing instance to client's browser window.",
            "title": "Packaging structure"
        },
        {
            "location": "/dev/development/#dependencies-in-classloading",
            "text": "Webswing uses custom classloaders to achieve classpath isolation and also bytecode modifications where necessary. Following picture describes the way webswing loads swing applications:   Webswing uses the same main.Main class to start the server and also to start swing instances. Based on input parameters, this class initializes the DefaultClassLoader classpath and delegates the initialization to the server launcher (webswing-server-launcher) or the swing launcher class (webswing-app-launcher).  Above picture shows the swing instance execution case, where the main.Main class creates also ExtLibClassLoader with classpath referring to /WEB-INF/swing-lib folder. After this classloader is created, singleton services (pdf generator, jms connection, etc.) are instantiated and injected to WebToolkit, which is used by swing applications.  One of the mentioned services is SwingClassloaderFactory, which instantiates the special classloader with bytecode instrumentation capabilities, which loads the swing application.",
            "title": "Dependencies in classloading"
        },
        {
            "location": "/dev/development/#directdraw-rendering",
            "text": "DirectDraw (DD) is the new way of rendering swing application to html canvas element. Compared to the old method, where the rendering is based on png images, this new way directly interprets the draw instructions on canvas. So the difference is similar as if you compare raster and vector graphics. DD should bring performance improvements in rendering speed and data transfer bandwidth size because it reduces the use of expensive png encoding.   Implementation of DD is located in  websiwng-directdraw  module and its two sub-modules.   webswing-directdraw-server  contains the server component, which is mainly the javascript for interpreting the swing draw instructions in html canvas. ( webswing-dd.js )  webswing-directdraw-swing  is the library for swing application that allows to capture swing draw instructions and encode them into efficient binary format.",
            "title": "DirectDraw rendering"
        },
        {
            "location": "/dev/development/#debugging",
            "text": "It is often necessary to debug swing application running within webswing to analyze eventual webswing specific problems. This is very easy with webswing. We assume that your application is already configured in webswing.config file. To debug your swing application follow this steps:    Open webswing.config file and change the \"debug\" property of your application to true.    Start Webswing server as usual.    Open Webswing page with  debugPort  url parameter (ie  http://localhost:8080/?debugPort=8000 , Login to Webswing and choose your application on application selection screen.    You will see log message in console saying that java process is waiting for debugger connection on port 8000. Now only set up your favorite debugger to connect to this port.",
            "title": "Debugging"
        },
        {
            "location": "/faq/",
            "text": "Ask your question\n\uf0c1\n\n\nAsk your questions using our contact form on \nwebswing.org",
            "title": "FAQ"
        },
        {
            "location": "/faq/#ask-your-question",
            "text": "Ask your questions using our contact form on  webswing.org",
            "title": "Ask your question"
        }
    ]
}